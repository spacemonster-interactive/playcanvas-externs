package playcanvas;

@:jsRequire("playcanvas", "ParticleEmitter") extern class ParticleEmitter {
	function new(graphicsDevice:Dynamic, options:Dynamic);
	var graphicsDevice : Dynamic;
	var precision : Float;
	var _addTimeTime : Float;
	var numParticles : Dynamic;
	var _gpuUpdater : ParticleGPUUpdater;
	var _cpuUpdater : ParticleCPUUpdater;
	var constantLightCube : Dynamic;
	var emitterPosUniform : js.lib.Float32Array;
	var wrapBoundsUniform : js.lib.Float32Array;
	var emitterScaleUniform : js.lib.Float32Array;
	var lightCube : js.lib.Float32Array;
	var lightCubeDir : Array<Dynamic>;
	var animTilesParams : js.lib.Float32Array;
	var animParams : js.lib.Float32Array;
	var animIndexParams : js.lib.Float32Array;
	var internalTex0 : Texture;
	var internalTex1 : Texture;
	var internalTex2 : Texture;
	var colorParam : Texture;
	var vbToSort : Array<Dynamic>;
	var vbOld : js.lib.Float32Array;
	var particleDistance : js.lib.Float32Array;
	var camera : Dynamic;
	var swapTex : Bool;
	var useMesh : Bool;
	var useCpu : Bool;
	var pack8 : Bool;
	var localBounds : BoundingBox;
	var worldBoundsNoTrail : BoundingBox;
	var worldBoundsTrail : Array<BoundingBox>;
	var worldBounds : BoundingBox;
	var worldBoundsSize : Vec3;
	var prevWorldBoundsSize : Vec3;
	var prevWorldBoundsCenter : Vec3;
	var prevEmitterExtents : Dynamic;
	var prevEmitterRadius : Dynamic;
	var worldBoundsMul : Vec3;
	var worldBoundsAdd : Vec3;
	var timeToSwitchBounds : Float;
	var shaderParticleUpdateRespawn : Shader;
	var shaderParticleUpdateNoRespawn : Shader;
	var shaderParticleUpdateOnStop : Shader;
	var numParticleVerts : Float;
	var numParticleIndices : Float;
	var material : Material;
	var meshInstance : MeshInstance;
	var drawOrder : Float;
	var seed : Float;
	var fixedTimeStep : Float;
	var maxSubSteps : Float;
	var simTime : Float;
	var simTimeTotal : Float;
	var beenReset : Bool;
	var _layer : Dynamic;
	final defaultParamTexture : Dynamic;
	function onChangeCamera():Void;
	function calculateBoundsMad():Void;
	function calculateWorldBounds():Void;
	function resetWorldBounds():Void;
	function calculateLocalBounds():Void;
	function rebuild():Void;
	var colorMap : Dynamic;
	var spawnBounds : Dynamic;
	var numParticlesPot : Float;
	var particleTex : js.lib.Float32Array;
	var particleTexStart : Dynamic;
	var particleTexIN : Texture;
	var particleTexOUT : Texture;
	var rtParticleTexIN : RenderTarget;
	var rtParticleTexOUT : RenderTarget;
	function _isAnimated():Dynamic;
	function rebuildGraphs():Void;
	var qLocalVelocity : Dynamic;
	var qVelocity : Dynamic;
	var qColor : Dynamic;
	var qRotSpeed : Dynamic;
	var qScale : Dynamic;
	var qAlpha : Dynamic;
	var qRadialSpeed : Dynamic;
	var qLocalVelocity2 : Dynamic;
	var qVelocity2 : Dynamic;
	var qColor2 : Dynamic;
	var qRotSpeed2 : Dynamic;
	var qScale2 : Dynamic;
	var qAlpha2 : Dynamic;
	var qRadialSpeed2 : Dynamic;
	var localVelocityUMax : js.lib.Float32Array;
	var velocityUMax : js.lib.Float32Array;
	var colorUMax : js.lib.Float32Array;
	var rotSpeedUMax : Array<Float>;
	var scaleUMax : Array<Float>;
	var alphaUMax : Array<Float>;
	var radialSpeedUMax : Array<Float>;
	var qLocalVelocityDiv : js.lib.Float32Array;
	var qVelocityDiv : js.lib.Float32Array;
	var qColorDiv : js.lib.Float32Array;
	var qRotSpeedDiv : js.lib.Float32Array;
	var qScaleDiv : js.lib.Float32Array;
	var qAlphaDiv : js.lib.Float32Array;
	var qRadialSpeedDiv : js.lib.Float32Array;
	var maxVel : Float;
	var internalTex3 : Texture;
	function _initializeTextures():Void;
	function regenShader():Void;
	var normalOption : Float;
	function resetMaterial():Void;
	function _compParticleFaceParams():Void;
	function _allocate(numParticles:Dynamic):Void;
	var vertexBuffer : VertexBuffer;
	var indexBuffer : IndexBuffer;
	var vbCPU : js.lib.Float32Array;
	function reset():Void;
	var loop : Dynamic;
	function prewarm(time:Dynamic):Void;
	function resetTime():Void;
	var endTime : Float;
	function finishFrame():Void;
	function addTime(delta:Dynamic, isOnStop:Dynamic):Void;
	function _destroyResources():Void;
	function destroy():Void;
	static var prototype : ParticleEmitter;
}