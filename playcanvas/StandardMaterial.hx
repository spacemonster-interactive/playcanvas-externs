package playcanvas;

/**
	A Standard material is the main, general purpose material that is most often used for rendering.
	It can approximate a wide variety of surface types and can simulate dynamic reflected light.
	Most maps can use 3 types of input values in any combination: constant (color or number), mesh
	vertex colors and a texture. All enabled inputs are multiplied together.
**/
@:jsRequire("playcanvas", "StandardMaterial") extern class StandardMaterial extends Material {
	var _dirtyShader : Bool;
	var _assetReferences : { };
	var _activeParams : js.lib.Set<Dynamic>;
	var _activeLightingParams : js.lib.Set<Dynamic>;
	var shaderOptBuilder : StandardMaterialOptionsBuilder;
	function reset():Void;
	var alphaFade : Bool;
	var ambient : Color;
	var ambientTint : Bool;
	var anisotropy : Float;
	var aoMap : Null<Texture>;
	var aoMapChannel : String;
	var aoMapOffset : Vec2;
	var aoMapRotation : Float;
	var aoMapTiling : Vec2;
	var aoMapUv : Float;
	var aoVertexColor : Bool;
	var aoVertexColorChannel : String;
	var bumpiness : Float;
	var clearCoat : Float;
	var clearCoatBumpiness : Float;
	var clearCoatGlossMap : Null<Texture>;
	var clearCoatGlossMapChannel : String;
	var clearCoatGlossMapOffset : Vec2;
	var clearCoatGlossMapRotation : Float;
	var clearCoatGlossMapTiling : Vec2;
	var clearCoatGlossMapUv : Float;
	var clearCoatGlossVertexColor : Bool;
	var clearCoatGlossVertexColorChannel : String;
	var clearCoatGloss : Float;
	var clearCoatMap : Null<Texture>;
	var clearCoatMapChannel : String;
	var clearCoatMapOffset : Vec2;
	var clearCoatMapRotation : Float;
	var clearCoatMapTiling : Vec2;
	var clearCoatMapUv : Float;
	var clearCoatNormalMap : Null<Texture>;
	var clearCoatNormalMapOffset : Vec2;
	var clearCoatNormalMapRotation : Float;
	var clearCoatNormalMapTiling : Vec2;
	var clearCoatNormalMapUv : Float;
	var clearCoatVertexColor : Bool;
	var clearCoatVertexColorChannel : String;
	var conserveEnergy : Bool;
	var cubeMap : Null<Texture>;
	var cubeMapProjection : Float;
	var cubeMapProjectionBox : BoundingBox;
	var diffuse : Color;
	var diffuseDetailMap : Null<Texture>;
	var diffuseDetailMapChannel : String;
	var diffuseDetailMapOffset : Vec2;
	var diffuseDetailMapRotation : Float;
	var diffuseDetailMapTiling : Vec2;
	var diffuseDetailMapUv : Float;
	var diffuseDetailMode : String;
	var diffuseMap : Null<Texture>;
	var diffuseMapChannel : String;
	var diffuseMapOffset : Vec2;
	var diffuseMapRotation : Float;
	var diffuseMapTiling : Vec2;
	var diffuseMapUv : Float;
	var diffuseTint : Bool;
	var diffuseVertexColor : Bool;
	var diffuseVertexColorChannel : String;
	var emissive : Color;
	var emissiveIntensity : Float;
	var emissiveMap : Null<Texture>;
	var emissiveMapChannel : String;
	var emissiveMapOffset : Vec2;
	var emissiveMapRotation : Float;
	var emissiveMapTiling : Vec2;
	var emissiveMapUv : Float;
	var emissiveTint : Bool;
	var emissiveVertexColor : Bool;
	var emissiveVertexColorChannel : String;
	var enableGGXSpecular : Bool;
	var fresnelModel : Float;
	var gloss : Float;
	var glossMap : Null<Texture>;
	var glossMapChannel : String;
	var glossMapOffset : Vec2;
	var glossMapRotation : Float;
	var glossMapTiling : Vec2;
	var glossMapUv : Float;
	var glossVertexColor : Bool;
	var glossVertexColorChannel : String;
	var heightMap : Null<Texture>;
	var heightMapChannel : String;
	var heightMapFactor : Float;
	var heightMapOffset : Vec2;
	var heightMapRotation : Float;
	var heightMapTiling : Vec2;
	var heightMapUv : Float;
	var lightMap : Null<Texture>;
	var lightMapChannel : String;
	var lightMapOffset : Vec2;
	var lightMapRotation : Float;
	var lightMapTiling : Vec2;
	var lightMapUv : Float;
	var lightVertexColor : Bool;
	var lightVertexColorChannel : String;
	var metalness : Float;
	var metalnessMap : Null<Texture>;
	var metalnessMapChannel : String;
	var metalnessMapOffset : Vec2;
	var metalnessMapRotation : Float;
	var metalnessMapTiling : Vec2;
	var metalnessMapUv : Float;
	var metalnessVertexColor : Bool;
	var metalnessVertexColorChannel : String;
	var normalDetailMap : Null<Texture>;
	var normalDetailMapBumpiness : Float;
	var normalDetailMapOffset : Vec2;
	var normalDetailMapRotation : Float;
	var normalDetailMapTiling : Vec2;
	var normalDetailMapUv : Float;
	var normalMap : Null<Texture>;
	var normalMapOffset : Vec2;
	var normalMapRotation : Float;
	var normalMapTiling : Vec2;
	var normalMapUv : Float;
	var occludeDirect : Float;
	var occludeSpecular : Float;
	var occludeSpecularIntensity : Float;
	dynamic function onUpdateShader(options:StandardMaterialOptions):StandardMaterialOptions;
	var opacity : Float;
	var opacityFadesSpecular : Bool;
	var opacityMap : Null<Texture>;
	var opacityMapChannel : String;
	var opacityMapOffset : Vec2;
	var opacityMapRotation : Float;
	var opacityMapTiling : Vec2;
	var opacityMapUv : Float;
	var opacityVertexColor : Bool;
	var opacityVertexColorChannel : String;
	var pixelSnap : Bool;
	var reflectivity : Float;
	var refraction : Float;
	var refractionIndex : Float;
	var shadingModel : Float;
	var specular : Color;
	var specularMap : Null<Texture>;
	var specularMapChannel : String;
	var specularMapOffset : Vec2;
	var specularMapRotation : Float;
	var specularMapTiling : Vec2;
	var specularMapUv : Float;
	var specularTint : Bool;
	var specularVertexColor : Bool;
	var specularVertexColorChannel : String;
	var specularityFactor : Float;
	var specularityFactorMap : Null<Texture>;
	var specularityFactorMapChannel : String;
	var specularityFactorMapOffset : Vec2;
	var specularityFactorMapRotation : Float;
	var specularityFactorMapTiling : Vec2;
	var specularityFactorMapUv : Float;
	var useSheen : Bool;
	var sheen : Color;
	var sheenMap : Null<Texture>;
	var sheenMapChannel : String;
	var sheenMapOffset : Vec2;
	var sheenMapRotation : Float;
	var sheenMapTiling : Vec2;
	var sheenMapUv : Float;
	var sheenTint : Bool;
	var sheenVertexColor : Bool;
	var sheenVertexColorChannel : String;
	var sphereMap : Null<Texture>;
	var twoSidedLighting : Bool;
	var useFog : Bool;
	var useGammaTonemap : Bool;
	var useLighting : Bool;
	var useMetalness : Bool;
	var useMetalnessSpecularColor : Bool;
	var useSkybox : Bool;
	private var _chunks : Dynamic;
	var _uniformCache : { };
	/**
		Object containing custom shader chunks that will replace default ones.
	**/
	var chunks : haxe.DynamicAccess<String>;
	/**
		Copy a `StandardMaterial`.
	**/
	function copy(source:StandardMaterial):StandardMaterial;
	function _setParameter(name:Dynamic, value:Dynamic):Void;
	function _setParameters(parameters:Dynamic):Void;
	function _processParameters(paramsName:Dynamic):Void;
	function _updateMap(p:Dynamic):Void;
	function _allocUniform(name:Dynamic, allocFunc:Dynamic):Dynamic;
	function getUniform(name:Dynamic, device:Dynamic, scene:Dynamic):Dynamic;
	function updateEnvUniforms(device:Dynamic, scene:Dynamic):Void;
	/**
		Clone a material.
	**/
	function clone():StandardMaterial;
	static var prototype : StandardMaterial;
	static var TEXTURE_PARAMETERS : Array<Dynamic>;
	static var CUBEMAP_PARAMETERS : Array<Dynamic>;
}